
VITE_SUPABASE_URL=https://mylldnnmdqhzsrmibmio.supabase.co
VITE_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im15bGxkbm5tZHFoenNybWlibWlvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzk5NzkwNjgsImV4cCI6MjA1NTU1NTA2OH0.SRbtgWbcAMXMkLinxnumc-aOZfZH6TDcJPc4e0c6eKc
import { useState } from 'react'
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query'
import { Pencil, Trash, Plus } from 'lucide-react'
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { getCategories, addCategory, updateCategory, deleteCategory } from '@/lib/supabase'

export const CategoriesManager = () => {
  const [newCategory, setNewCategory] = useState('')
  const [editingId, setEditingId] = useState<string | null>(null)
  const [editingName, setEditingName] = useState('')
  const queryClient = useQueryClient()

  const { data: categories } = useQuery({
    queryKey: ['categories'],
    queryFn: getCategories
  })

  const addMutation = useMutation({
    mutationFn: addCategory,
    onSuccess: () => {
      queryClient.invalidateQueries(['categories'])
      setNewCategory('')
    }
  })

  const updateMutation = useMutation({
    mutationFn: updateCategory,
    onSuccess: () => {
      queryClient.invalidateQueries(['categories'])
      setEditingId(null)
    }
  })

  const deleteMutation = useMutation({
    mutationFn: deleteCategory,
    onSuccess: () => queryClient.invalidateQueries(['categories'])
  })

  return (
    <Card>
      <CardHeader>
        <CardTitle>Categories</CardTitle>
      </CardHeader>
      <CardContent>
        <div className="space-y-4">
          <div className="flex gap-2">
            <Input
              placeholder="New category name"
              value={newCategory}
              onChange={(e) => setNewCategory(e.target.value)}
            />
            <Button 
              onClick={() => addMutation.mutate(newCategory)}
              disabled={!newCategory.trim()}
            >
              <Plus className="w-4 h-4 mr-2" />
              Add
            </Button>
          </div>

          <div className="space-y-2">
            {categories?.data?.map((category) => (
              <div key={category.id} className="flex items-center gap-2">
                {editingId === category.id ? (
                  <Input
                    value={editingName}
                    onChange={(e) => setEditingName(e.target.value)}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter') {
                        updateMutation.mutate({ id: category.id, name: editingName })
                      }
                    }}
                  />
                ) : (
                  <div className="flex-1">{category.name}</div>
                )}
                
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => {
                    if (editingId === category.id) {
                      updateMutation.mutate({ id: category.id, name: editingName })
                    } else {
                      setEditingId(category.id)
                      setEditingName(category.name)
                    }
                  }}
                >
                  <Pencil className="w-4 h-4" />
                </Button>
                <Button
                  variant="ghost"
                  size="sm"
                  onClick={() => deleteMutation.mutate(category.id)}
                >
                  <Trash className="w-4 h-4" />
                </Button>
              </div>
            ))}
          </div>
        </div>
      </CardContent>
    </Card>
  )
}