






































































































































}  return { deleteExpense, loading, error };  };    }      setLoading(false);    } finally {      setError(error.message);    } catch (error) {      return data;      if (error) throw error;        .eq('id', id);        .delete()        .from('expenses')      const { data, error } = await supabase      setLoading(true);    try {  const deleteExpense = async (id) => {  const [error, setError] = useState(null);  const [loading, setLoading] = useState(false);export function useDeleteExpense() {}  return { updateExpense, loading, error };  };    }      setLoading(false);    } finally {      setError(error.message);    } catch (error) {      return data;      if (error) throw error;        .eq('id', id);        .update(updates)        .from('expenses')      const { data, error } = await supabase      setLoading(true);    try {  const updateExpense = async (id, updates) => {  const [error, setError] = useState(null);  const [loading, setLoading] = useState(false);export function useUpdateExpense() {}  return { createExpense, loading, error };  };    }      setLoading(false);    } finally {      setError(error.message);    } catch (error) {      return data;      if (error) throw error;        .insert([expense]);        .from('expenses')      const { data, error } = await supabase      setLoading(true);    try {  const createExpense = async (expense) => {  const [error, setError] = useState(null);  const [loading, setLoading] = useState(false);export function useCreateExpense() {}  return { expense, loading, error };  };    }      setLoading(false);    } finally {      setError(error.message);    } catch (error) {      setExpense(data);      if (error) throw error;        .single();        .eq('id', id)        .select('*, category:categories(*), account:accounts(*)')        .from('expenses')      const { data, error } = await supabase    try {  const fetchExpense = async () => {  }, [id]);    fetchExpense();  useEffect(() => {  const [error, setError] = useState(null);  const [loading, setLoading] = useState(true);  const [expense, setExpense] = useState(null);export function useExpense(id) {}  return { expenses, loading, error };  };    }      setLoading(false);    } finally {      setError(error.message);    } catch (error) {      setExpenses(data);      if (error) throw error;        .order('date', { ascending: false });        .select('*, category:categories(*), account:accounts(*)')        .from('expenses')      const { data, error } = await supabase    try {  const fetchExpenses = async () => {  }, []);    fetchExpenses();  useEffect(() => {  const [error, setError] = useState(null);  const [loading, setLoading] = useState(true);  const [expenses, setExpenses] = useState([]);export function useExpenses() {import { supabase } from '../supabaseClient';import { useState, useEffect } from 'react';